//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Manual changes to this file may cause unexpected behavior in your application.
//     Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace moonlight
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Entity.Core.Objects;
    using System.Linq;
    
    public partial class moreorlessEntities : DbContext
    {
        public moreorlessEntities()
            : base("name=moreorlessEntities")
        {
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
        public virtual DbSet<Champions> Champions { get; set; }
        public virtual DbSet<RankingCost> RankingCost { get; set; }
        public virtual DbSet<RankingSkin> RankingSkin { get; set; }
        public virtual DbSet<Skins> Skins { get; set; }
    
        public virtual int ChampionAdd(string championName, Nullable<int> championCost, byte[] championIcon)
        {
            var championNameParameter = championName != null ?
                new ObjectParameter("ChampionName", championName) :
                new ObjectParameter("ChampionName", typeof(string));
    
            var championCostParameter = championCost.HasValue ?
                new ObjectParameter("ChampionCost", championCost) :
                new ObjectParameter("ChampionCost", typeof(int));
    
            var championIconParameter = championIcon != null ?
                new ObjectParameter("ChampionIcon", championIcon) :
                new ObjectParameter("ChampionIcon", typeof(byte[]));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("ChampionAdd", championNameParameter, championCostParameter, championIconParameter);
        }
    
        public virtual int ScoreCostAdd(string playerName, Nullable<int> score)
        {
            var playerNameParameter = playerName != null ?
                new ObjectParameter("PlayerName", playerName) :
                new ObjectParameter("PlayerName", typeof(string));
    
            var scoreParameter = score.HasValue ?
                new ObjectParameter("Score", score) :
                new ObjectParameter("Score", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("ScoreCostAdd", playerNameParameter, scoreParameter);
        }
    
        public virtual int ScoreSkinAdd(string playerName, Nullable<int> score)
        {
            var playerNameParameter = playerName != null ?
                new ObjectParameter("PlayerName", playerName) :
                new ObjectParameter("PlayerName", typeof(string));
    
            var scoreParameter = score.HasValue ?
                new ObjectParameter("Score", score) :
                new ObjectParameter("Score", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("ScoreSkinAdd", playerNameParameter, scoreParameter);
        }
    
        public virtual int SkinAdd(string skinName, string championName)
        {
            var skinNameParameter = skinName != null ?
                new ObjectParameter("SkinName", skinName) :
                new ObjectParameter("SkinName", typeof(string));
    
            var championNameParameter = championName != null ?
                new ObjectParameter("ChampionName", championName) :
                new ObjectParameter("ChampionName", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SkinAdd", skinNameParameter, championNameParameter);
        }
    
        public virtual int ChampionAdd_1(string championName, Nullable<int> championCost, byte[] championIcon)
        {
            var championNameParameter = championName != null ?
                new ObjectParameter("ChampionName", championName) :
                new ObjectParameter("ChampionName", typeof(string));
    
            var championCostParameter = championCost.HasValue ?
                new ObjectParameter("ChampionCost", championCost) :
                new ObjectParameter("ChampionCost", typeof(int));
    
            var championIconParameter = championIcon != null ?
                new ObjectParameter("ChampionIcon", championIcon) :
                new ObjectParameter("ChampionIcon", typeof(byte[]));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("ChampionAdd_1", championNameParameter, championCostParameter, championIconParameter);
        }
    }
}
